#!/usr/bin/env python3
"""
Montu Manager Docker Management Script

This script manages Docker services with random port assignment
to avoid conflicts with ports 8000 and 3000.
"""

import os
import random
import subprocess
import sys
import socket
from pathlib import Path
from typing import Dict, List, Optional

def is_port_available(port: int) -> bool:
    """Check if a port is available for use."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        try:
            sock.bind(('localhost', port))
            return True
        except OSError:
            return False

def find_available_port(start_port: int = 27017, avoid_ports: List[int] = None) -> int:
    """Find an available port, avoiding specified ports."""
    avoid_ports = avoid_ports or [8000, 3000]
    
    # Try the default port first
    if start_port not in avoid_ports and is_port_available(start_port):
        return start_port
    
    # Search for available port in range
    for port in range(start_port + 1, start_port + 1000):
        if port not in avoid_ports and is_port_available(port):
            return port
    
    raise RuntimeError(f"Could not find available port starting from {start_port}")

def generate_random_ports() -> Dict[str, int]:
    """Generate random available ports for all services."""
    avoid_ports = [8000, 3000]  # Ports to avoid as specified
    
    ports = {}
    
    # MongoDB port
    ports['MONGO_PORT'] = find_available_port(27017, avoid_ports)
    avoid_ports.append(ports['MONGO_PORT'])
    
    # FastAPI port
    ports['API_PORT'] = find_available_port(8080, avoid_ports)
    avoid_ports.append(ports['API_PORT'])
    
    # MongoDB Express port
    ports['MONGOEXPRESS_PORT'] = find_available_port(8081, avoid_ports)
    avoid_ports.append(ports['MONGOEXPRESS_PORT'])
    
    return ports

def create_env_file(ports: Dict[str, int], env_file: str = '.env') -> None:
    """Create .env file with assigned ports."""
    env_content = f"""# Montu Manager Environment Configuration
# Auto-generated by docker-manager.py

# MongoDB Configuration
MONGO_PORT={ports['MONGO_PORT']}
MONGO_ROOT_PASSWORD=montu_secure_2024

# FastAPI Configuration
API_PORT={ports['API_PORT']}

# MongoDB Express (Development UI)
MONGOEXPRESS_PORT={ports['MONGOEXPRESS_PORT']}
MONGOEXPRESS_LOGIN=admin
MONGOEXPRESS_PASSWORD=admin123

# Application Environment
ENVIRONMENT=development
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"✅ Created {env_file} with assigned ports:")
    for service, port in ports.items():
        print(f"   {service}: {port}")

def run_docker_command(command: List[str]) -> int:
    """Run a docker-compose command."""
    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(result.stdout)
        return 0
    except subprocess.CalledProcessError as e:
        print(f"❌ Error running command: {' '.join(command)}")
        print(f"   {e.stderr}")
        return e.returncode

def main():
    """Main script entry point."""
    if len(sys.argv) < 2:
        print("""
Montu Manager Docker Management Script

Usage:
    python scripts/docker-manager.py <command> [options]

Commands:
    setup       - Generate .env file with random ports
    start       - Start MongoDB service
    start-dev   - Start MongoDB + MongoDB Express (development UI)
    start-api   - Start all services including FastAPI
    stop        - Stop all services
    restart     - Restart all services
    logs        - Show service logs
    status      - Show service status
    clean       - Stop and remove all containers and volumes

Examples:
    python scripts/docker-manager.py setup
    python scripts/docker-manager.py start
    python scripts/docker-manager.py start-dev
    python scripts/docker-manager.py logs mongodb
""")
        return 1

    command = sys.argv[1].lower()
    
    # Ensure we're in the project root
    project_root = Path(__file__).parent.parent
    os.chdir(project_root)
    
    if command == 'setup':
        print("🔧 Setting up Montu Manager Docker environment...")
        ports = generate_random_ports()
        create_env_file(ports)
        print("✅ Setup complete! You can now run 'python scripts/docker-manager.py start'")
        return 0
    
    # Ensure .env file exists for other commands
    if not os.path.exists('.env'):
        print("❌ .env file not found. Run 'python scripts/docker-manager.py setup' first.")
        return 1
    
    if command == 'start':
        print("🚀 Starting MongoDB service...")
        return run_docker_command(['docker-compose', 'up', '-d', 'mongodb'])
    
    elif command == 'start-dev':
        print("🚀 Starting MongoDB + MongoDB Express (development mode)...")
        return run_docker_command(['docker-compose', '--profile', 'dev', 'up', '-d'])
    
    elif command == 'start-api':
        print("🚀 Starting all services including FastAPI...")
        return run_docker_command(['docker-compose', '--profile', 'api', '--profile', 'dev', 'up', '-d'])
    
    elif command == 'stop':
        print("🛑 Stopping all services...")
        return run_docker_command(['docker-compose', 'down'])
    
    elif command == 'restart':
        print("🔄 Restarting all services...")
        run_docker_command(['docker-compose', 'down'])
        return run_docker_command(['docker-compose', 'up', '-d'])
    
    elif command == 'logs':
        service = sys.argv[2] if len(sys.argv) > 2 else ''
        if service:
            return run_docker_command(['docker-compose', 'logs', '-f', service])
        else:
            return run_docker_command(['docker-compose', 'logs', '-f'])
    
    elif command == 'status':
        print("📊 Service status:")
        return run_docker_command(['docker-compose', 'ps'])
    
    elif command == 'clean':
        print("🧹 Cleaning up all containers and volumes...")
        run_docker_command(['docker-compose', 'down', '-v'])
        return run_docker_command(['docker', 'system', 'prune', '-f'])
    
    else:
        print(f"❌ Unknown command: {command}")
        return 1

if __name__ == '__main__':
    sys.exit(main())
